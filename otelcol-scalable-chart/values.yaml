# Default values for OpenTelemetry Collector Stack

## Global settings
global:
  clusterName: ""
  environment: "production"
  namespace: o11y

## Multiple OTLP Destinations Configuration
## Each destination can handle traces, metrics, and/or logs via OTLP protocol
otlpDestinations:
  # Primary destination (backward compatibility with grafanaCloud)
  grafanaCloud:
    enabled: true
    endpoint: ""
    authSecretName: ""
    usernameKey: "username" 
    passwordKey: "password"
    signals: ["traces", "metrics", "logs"]  # Which signals to send to this destination
    
  # Additional OTLP destinations can be added here
  # Examples:
  # jaeger:
  #   enabled: false
  #   endpoint: "http://jaeger:4318"
  #   authSecretName: "jaeger-auth"
  #   signals: ["traces"]
  #
  # loki:
  #   enabled: false  
  #   endpoint: "http://loki:3100/otlp"
  #   authSecretName: "loki-auth"
  #   signals: ["logs"]
  #
  # prometheus:
  #   enabled: false
  #   endpoint: "http://prometheus:3100/otlp"
  #   authSecretName: "prometheus-auth" 
  #   signals: ["metrics"]

## Legacy Grafana Cloud Configuration (deprecated, use otlpDestinations.grafanaCloud instead)
grafanaCloud:
  endpoint: ""
  authSecretName: ""
  usernameKey: ""
  passwordKey: ""
  createSecret: false

## Common Collector Settings (defaults for all collectors)
collectorsCommon:
  image:
    repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
    tag: "0.133.0"
  resources:
    limits:
      memory: 1Gi
      cpu: 500m
    requests:
      memory: 512Mi
      cpu: 200m
  serviceAccount: otel-collector

readinessProbe:
  enabled: true

## Application Observability Configuration
applicationObservability:
  receiver:
    transform:
      traces:
        enabled: false
        transforms:
          resource: []
          span: []
      metrics:
        enabled: false
        filters:
          datapoint: []
        transforms:
          datapoint: []
      logs:
        enabled: false
        transforms:
          log: []
  
  spanmetrics:
    transform:
      metrics:
        enabled: false
        filters:
          datapoint: []
        transforms:
          datapoint: []
  
  servicegraph:
    transform:
      metrics:
        enabled: false
        filters:
          datapoint: []
        transforms:
          datapoint: []
  
  tailsampling:
    policies:
      enabled: false
      # List of tail sampling policies - supports all OpenTelemetry tail sampling policy types
      list: []
      # Examples of all supported policy types:
      # list:
      #   # Always sample certain traces
      #   - name: always-sample-critical
      #     type: always_sample
      #
      #   # Sample based on latency
      #   - name: slow-requests
      #     type: latency
      #     latency:
      #       threshold_ms: 2000
      #
      #   # Sample based on numeric attributes
      #   - name: high-value-transactions
      #     type: numeric_attribute
      #     numeric_attribute:
      #       key: transaction.amount
      #       min_value: 1000
      #       max_value: 10000
      #
      #   # Probabilistic sampling
      #   - name: random-sample
      #     type: probabilistic
      #     probabilistic:
      #       hash_salt: custom-salt
      #       sampling_percentage: 10
      #
      #   # Sample based on status codes
      #   - name: errors-only
      #     type: status_code
      #     status_code:
      #       status_codes: [ERROR, UNSET]
      #
      #   # Sample based on string attributes
      #   - name: important-services
      #     type: string_attribute
      #     string_attribute:
      #       key: service.name
      #       values: [auth-service, payment-service]
      #
      #   # Rate limiting
      #   - name: rate-limit
      #     type: rate_limiting
      #     rate_limiting:
      #       spans_per_second: 100
      #
      #   # Sample based on span count
      #   - name: complex-traces
      #     type: span_count
      #     span_count:
      #       min_spans: 10
      #       max_spans: 1000
      #
      #   # Sample based on trace state
      #   - name: trace-state-sample
      #     type: trace_state
      #     trace_state:
      #       key: sampling
      #       values: [enabled, priority]
      #
      #   # Sample based on boolean attributes
      #   - name: debug-traces
      #     type: boolean_attribute
      #     boolean_attribute:
      #       key: debug.enabled
      #       value: true
      #
      #   # Sample based on OTTL conditions
      #   - name: ottl-condition
      #     type: ottl_condition
      #     ottl_condition:
      #       error_mode: ignore
      #       span:
      #         - 'attributes["http.status_code"] >= 400'
      #       spanevent:
      #         - 'name == "exception"'
      #
      #   # AND policy (all sub-policies must match)
      #   - name: errors-and-slow
      #     type: and
      #     and:
      #       and_sub_policy:
      #         - name: error-policy
      #           type: status_code
      #           status_code:
      #             status_codes: [ERROR]
      #         - name: latency-policy
      #           type: latency
      #           latency:
      #             threshold_ms: 1000
      #
      #   # Composite policy (multiple evaluation criteria)
      #   - name: composite-sample
      #     type: composite
      #     composite:
      #       max_total_spans_per_second: 1000
      #       policy_order: [errors-policy, latency-policy, probabilistic-policy]
      #       composite_sub_policy:
      #         - name: errors-policy
      #           type: status_code
      #           status_code:
      #             status_codes: [ERROR]
      #         - name: latency-policy  
      #           type: latency
      #           latency:
      #             threshold_ms: 500
      #         - name: probabilistic-policy
      #           type: probabilistic
      #           probabilistic:
      #             sampling_percentage: 5
    transform:
      traces:
        enabled: false
        transforms:
          resource: []
          span: []

## Collector Definitions
collectors:
  # Application Observability Collectors
  receiver:
    enabled: true
    type: application
    replicas: 1
    mode: deployment
    resources:
      limits:
        memory: 512Mi
        cpu: 500m
      requests:
        memory: 256Mi
        cpu: 200m
    config:
      workloadName: "receiver"
      receivers: ["otlp", "filelog"]
      processors: ["memory_limiter", "k8sattributes", "resource", "batch"]
      exporters: ["loadbalancing", "loadbalancing/spanmetrics", "loadbalancing/servicegraph"]

  tailsampling:
    enabled: true
    type: application
    replicas: 2
    mode: statefulset
    config:
      workloadName: "tailsampling"
      samplingRate: 0.5
      decisionWait: "10s"
      receivers: ["otlp"]
      processors: ["memory_limiter", "resource/add_workload_name", "tail_sampling", "batch"]
      exporters: ["otlphttp/grafanacloud"]

  spanmetrics:
    enabled: true
    type: application
    replicas: 2
    mode: statefulset
    serviceAccount: otel-collector
    image: 
      repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
      tag: "0.133.0"
    resources:
      limits:
        memory: 2Gi
        cpu: 500m
      requests:
        memory: 1Gi
        cpu: 200m
    config:
      workloadName: "spanmetrics"
      receivers: ["otlp"]
      processors: ["memory_limiter", "resource/add_collector_info", "filter/spanmetrics_only", "batch"]
      exporters: ["otlphttp/grafanacloud"]

  servicegraph:
    enabled: true
    type: application
    replicas: 2
    mode: statefulset
    serviceAccount: otel-collector
    image: 
      repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
      tag: "0.133.0"
    resources:
      limits:
        memory: 2Gi
        cpu: 500m
      requests:
        memory: 1Gi
        cpu: 200m
    config:
      workloadName: "servicegraph"
      flushInterval: "60s"
      receivers: ["otlp"]
      processors: ["memory_limiter", "resource/add_collector_info", "batch"]
      exporters: ["otlphttp/grafanacloud", "debug"]

  # Infrastructure Observability Collectors
  cluster-metrics:
    enabled: true
    type: infrastructure
    replicas: 3
    mode: statefulset
    resources:
      limits:
        memory: 2Gi
        cpu: 1
      requests:
        memory: 1Gi
        cpu: 500m
    targetAllocator:
      enabled: true
    config:
      workloadName: "cluster"
      receivers: ["k8s_cluster", "prometheus"]
      processors: ["memory_limiter", "resource", "batch"]
      exporters: ["otlphttp/grafanacloud"]

  node-metrics:
    enabled: true
    type: infrastructure
    replicas: 1
    mode: daemonset
    serviceAccount: otel-collector
    image: 
      repository: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib
      tag: "0.133.0"
    resources:
      limits:
        memory: 256Mi
        cpu: 200m
      requests:
        memory: 128Mi
        cpu: 100m
    config:
      workloadName: "nodes"
      receivers: ["kubeletstats", "prometheus"]
      processors: ["memory_limiter", "filter/kubeletstats_allowlist", "resource", "batch"]
      exporters: ["otlphttp/grafanacloud"]

## Allowlists
allowlists:
  cadvisor:
    enabled: true
  kubelet:
    enabled: true
  kubeStateMetrics:
    enabled: true
  nodeExporter:
    enabled: true
  kubeletstats:
    enabled: true
  otelCollector:
    enabled: true

## Dependencies
kubeStateMetrics:
  enabled: false
  fullnameOverride: "kube-state-metrics"

nodeExporter:
  enabled: true
  fullnameOverride: "node-exporter"
  service:
    port: 9100
    portName: metrics
  hostNetwork: true
  hostPID: true
  
## RBAC
rbac:
  create: true

## Validation
validation:
  enabled: true
  skipOperatorCheck: false
  skipConnectivityTest: false

## Health Probes
healthProbes:
  enabled: true
  readiness:
    initialDelaySeconds: 10
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3
  liveness:
    initialDelaySeconds: 30
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 3
  
## Service Account
serviceAccount:
  create: true
  name: otel-collector

## Histogram Configuration
histograms:
  buckets: [0.1, 0.5, 1, 2, 5]

## Common Configuration
imagePullSecrets: []
commonLabels: {}
commonAnnotations: {}