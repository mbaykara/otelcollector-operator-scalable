apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: collector-k8s-cluster
  namespace: o11y
spec:
  image: ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.133.0
  config:
    receivers:
      # Kubernetes cluster metrics (generates k8s.* names)
      k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 10s
        node_conditions_to_report:
          - Ready
          - MemoryPressure
          - DiskPressure
          - PIDPressure
        distribution: kubernetes
        allocatable_types_to_report:
          - cpu
          - memory
          - ephemeral-storage
      
      # Prometheus metrics following Grafana Cloud convention
      prometheus:
        config:
          scrape_configs:
          # All Nodes, scraping their cAdvisor endpoint (integrations/kubernetes/cadvisor)
          - job_name: 'integrations/kubernetes/cadvisor'
            scheme: https
            tls_config:
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
          
          # All Nodes, scraping their Kubelet metrics endpoint (integrations/kubernetes/kubelet)
          - job_name: 'integrations/kubernetes/kubelet'
            scheme: https
            tls_config:
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: go_goroutines|kubelet_certificate_manager_client_expiration_renew_errors|kubelet_certificate_manager_client_ttl_seconds|kubelet_certificate_manager_server_ttl_seconds|kubelet_cgroup_manager_duration_seconds_bucket|kubelet_cgroup_manager_duration_seconds_count|kubelet_node_config_error|kubelet_node_name|kubelet_pleg_relist_duration_seconds_bucket|kubelet_pleg_relist_duration_seconds_count|kubelet_pleg_relist_interval_seconds_bucket|kubelet_pod_start_duration_seconds_bucket|kubelet_pod_start_duration_seconds_count|kubelet_pod_worker_duration_seconds_bucket|kubelet_pod_worker_duration_seconds_count|kubelet_running_container_count|kubelet_running_containers|kubelet_running_pod_count|kubelet_running_pods|kubelet_runtime_operations_errors_total|kubelet_runtime_operations_total|kubelet_server_expiration_renew_errors|kubelet_volume_stats_available_bytes|kubelet_volume_stats_capacity_bytes|kubelet_volume_stats_inodes|kubelet_volume_stats_inodes_free|kubelet_volume_stats_inodes_used|kubelet_volume_stats_used_bytes|kubernetes_build_info|namespace_workload_pod|process_cpu_seconds_total|process_resident_memory_bytes|rest_client_requests_total|storage_operation_duration_seconds_count|storage_operation_errors_total|volume_manager_total_volumes
          
          # All Pods with kube-state-metrics label (integrations/kubernetes/kube-state-metrics)
          - job_name: 'integrations/kubernetes/kube-state-metrics'
            kubernetes_sd_configs:
            - role: service
            relabel_configs:
            - source_labels: [__meta_kubernetes_service_name]
              action: keep
              regex: kube-state-metrics
            - source_labels: [__meta_kubernetes_service_port_name]
              action: keep
              regex: http-metrics
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: kube_configmap_info|kube_node.*|kube_node_info|kube_configmap_metadata_resource_version|kube_cronjob.*|kube_daemonset.*|kube_deployment_metadata_generation|kube_deployment_spec_replicas|kube_deployment_status_condition|kube_deployment_status_observed_generation|kube_deployment_status_replicas_available|kube_deployment_status_replicas_updated|kube_horizontalpodautoscaler_spec_max_replicas|kube_horizontalpodautoscaler_spec_min_replicas|kube_horizontalpodautoscaler_status_current_replicas|kube_horizontalpodautoscaler_status_desired_replicas|kube_job.*|kube_namespace_status_phase|kube_node.*|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_access_mode|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_labels|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_persistentvolumeclaim_status_phase|kube_pod_completion_time|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_requests|kube_pod_container_status_last_terminated_reason|kube_pod_container_status_last_terminated_timestamp|kube_pod_container_status_restarts_total|kube_pod_container_status_waiting_reason|kube_pod_info|kube_pod_owner|kube_pod_restart_policy|kube_pod_spec_volumes_persistentvolumeclaims_info|kube_pod_start_time|kube_pod_status_phase|kube_pod_status_reason|kube_replicaset.*|kube_resourcequota|kube_secret_metadata_resource_version|kube_statefulset.*
          
          # All Pods with prometheus-node-exporter label (integrations/node_exporter)
          - job_name: 'integrations/node_exporter'
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
              action: keep
              regex: prometheus-node-exporter.*
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: metrics
            - source_labels: [__address__, __meta_kubernetes_pod_container_port_number]
              action: replace
              regex: (.+):(?:\d+);(\d+)
              replacement: $${1}:$${2}
              target_label: __address__
    
    processors:
      # Memory limiter
      memory_limiter:
        limit_mib: 800
        check_interval: 1s
        spike_limit_mib: 200
      
      # K8s attributes processor
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.deployment.name
            - k8s.container.name
          labels:
            - tag_name: k8s.pod.label.app
              key: app
              from: pod
            - tag_name: k8s.pod.label.version
              key: version
              from: pod
        pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.ip
          - sources:
            - from: resource_attribute
              name: k8s.pod.uid
          - sources:
            - from: connection
      
      # Resource processor to add cluster info
      resource:
        attributes:
        - key: cluster.name
          value: ${env:CLUSTER_NAME}
          action: upsert
        - key: otel_collector_environment
          value: ${env:COLLECTOR_ENVIRONMENT}
          action: upsert
        - key: collector.name
          value: "collector-k8s-cluster"
          action: upsert
        - key: collector.type
          value: "k8s-cluster"
          action: upsert
      
      
      # Batch processor
      batch:
        timeout: 10s
        send_batch_size: 1024
        send_batch_max_size: 2048
      
      # Transform processor to set standard labels
      transform/set_standard_labels:
        metric_statements:
          - set(resource.attributes["loki.resource.labels"], Concat(["deployment.environment", "service.name", "service.namespace", "service.instance.id", "otel_collector_environment", "cloud.platform", "cloud.datacenter", "cluster.name"], ","))
          - set(resource.attributes["otel_collector_environment"], "${env:COLLECTOR_ENVIRONMENT}")
    
    exporters:
      # Grafana Cloud OTLP endpoint
      otlphttp/grafanacloud:
        endpoint: ${env:GRAFANA_OTLP_ENDPOINT}
        auth:
          authenticator: basicauth/grafanacloud
        compression: gzip
        timeout: 30s
        retry_on_failure:
          enabled: true
          initial_interval: 5s
          max_interval: 30s
          max_elapsed_time: 300s
        sending_queue:
          enabled: true
          num_consumers: 10
          queue_size: 2000
        headers:
          User-Agent: "otel-collector-k8s-cluster/0.133.0"
    
    extensions:
      # Basic auth for Grafana Cloud
      basicauth/grafanacloud:
        client_auth:
          username: ${env:GRAFANA_USERNAME}
          password: ${env:GRAFANA_PASSWORD}
      
      # Health check
      health_check:
        endpoint: 0.0.0.0:13133
    
    service:
      extensions: [basicauth/grafanacloud, health_check]
      pipelines:
        metrics:
          receivers: [k8s_cluster, prometheus]
          processors: [memory_limiter, resource, transform/set_standard_labels, batch]
          exporters: [otlphttp/grafanacloud]
      telemetry:
        logs:
          level: DEBUG
        metrics:
          level: detailed
          readers:
          - pull:
              exporter:
                prometheus:
                  host: 0.0.0.0
                  port: 8888

  # Deploy as StatefulSet for cluster-level metrics
  mode: statefulset
  replicas: 1
  
  # Service account with cluster permissions
  serviceAccount: otel-k8s-cluster
  
  
  env:
  - name: CLUSTER_NAME
    value: monitoring-aks-01
  - name: GOMEMLIMIT
    value: 900MiB
  - name: COLLECTOR_ENVIRONMENT
    value: "production"
  - name: GRAFANA_OTLP_ENDPOINT
    value: "https://otlp-gateway-prod-eu-west-3.grafana.net/otlp"
  - name: GRAFANA_USERNAME
    valueFrom:
      secretKeyRef:
        key: stack_username
        name: dv-grafanacloud-auth
  - name: GRAFANA_PASSWORD
    valueFrom:
      secretKeyRef:
        key: stack_password
        name: dv-grafanacloud-auth