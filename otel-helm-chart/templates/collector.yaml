{{- range $name, $collector := .Values.collectors }}
{{- if $collector.enabled }}
{{- /* Merge collectorsCommon with individual collector settings */ -}}
{{- $mergedCollector := deepCopy $.Values.collectorsCommon | mustMergeOverwrite (deepCopy $collector) }}
---
apiVersion: opentelemetry.io/v1beta1
kind: OpenTelemetryCollector
metadata:
  name: {{ $.Release.Name }}-{{ $name }}
  namespace: {{ $.Values.global.namespace }}
  labels:
    {{- include "otel-collectors.labels" $ | nindent 4 }}
    component: {{ $name }}
    type: {{ $mergedCollector.type }}
spec:
  image: {{ $mergedCollector.image.repository }}:{{ $mergedCollector.image.tag }}
  {{- if gt ($mergedCollector.replicas | int) 1 }}
  replicas: {{ $mergedCollector.replicas }}
  {{- end }}
  resources:
    {{- toYaml $mergedCollector.resources | nindent 4 }}
  {{- if has "prometheus" $mergedCollector.config.receivers }}
  targetAllocator:
    enabled: true
  {{- end }}
  config:
    receivers:
      {{- if has "otlp" $mergedCollector.config.receivers }}
      otlp:
        protocols:
          grpc:
            endpoint: 0.0.0.0:4317
          http:
            endpoint: 0.0.0.0:4318
      {{- end }}
      {{- if has "k8s_cluster" $mergedCollector.config.receivers }}
      k8s_cluster:
        auth_type: serviceAccount
        collection_interval: 10s
        node_conditions_to_report:
          - Ready
          - MemoryPressure
          - DiskPressure
          - PIDPressure
        distribution: kubernetes
        allocatable_types_to_report:
          - cpu
          - memory
          - ephemeral-storage
      {{- end }}
      {{- if has "kubeletstats" $mergedCollector.config.receivers }}
      kubeletstats:
        collection_interval: 20s
        auth_type: serviceAccount
        endpoint: ${env:K8S_NODE_NAME}:10250
        insecure_skip_verify: true
        extra_metadata_labels:
          - container.id
          - k8s.volume.type
        metric_groups:
          - container
          - pod
          - node
          - volume
      {{- end }}
      {{- if has "prometheus" $mergedCollector.config.receivers }}
      prometheus:
        config:
          scrape_configs:
          {{- if eq $name "cluster-metrics" }}
          - job_name: 'integrations/kubernetes/cadvisor'
            scheme: https
            tls_config:
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics/cadvisor
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: {{ include "otel-collectors.cadvisorRegex" $ }}
          - job_name: 'integrations/kubernetes/kubelet'
            scheme: https
            tls_config:
              insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
            kubernetes_sd_configs:
            - role: node
            relabel_configs:
            - action: labelmap
              regex: __meta_kubernetes_node_label_(.+)
            - target_label: __address__
              replacement: kubernetes.default.svc:443
            - source_labels: [__meta_kubernetes_node_name]
              regex: (.+)
              target_label: __metrics_path__
              replacement: /api/v1/nodes/$${1}/proxy/metrics
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: {{ include "otel-collectors.kubeletRegex" $ }}
          - job_name: 'integrations/kubernetes/kube-state-metrics'
            kubernetes_sd_configs:
            - role: service
            relabel_configs:
            - source_labels: [__meta_kubernetes_service_name]
              action: keep
              regex: .*kube-state-metrics.*
            - source_labels: [__meta_kubernetes_service_port_name]
              action: keep
              regex: http
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: {{ include "otel-collectors.kubeStateMetricsRegex" $ }}
          - job_name: 'integrations/node_exporter'
            kubernetes_sd_configs:
            - role: pod
            relabel_configs:
            - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]
              action: keep
              regex: nodeExporter
            - source_labels: [__meta_kubernetes_pod_container_port_name]
              action: keep
              regex: metrics
            - source_labels: [__meta_kubernetes_pod_node_name]
              action: replace
              target_label: instance
            metric_relabel_configs:
            - source_labels: [__name__]
              action: keep
              regex: {{ include "otel-collectors.nodeExporterRegex" $ }}
          {{- end }}
      {{- end }}
    
    connectors:
      {{- if eq $name "spanmetrics" }}
      spanmetrics:
        histogram:
          explicit:
            buckets: {{ $.Values.histograms.buckets | toJson }}
          unit: s
        exemplars:
          enabled: true
        exclude_dimensions: ['status.code']
        dimensions_cache_size: 1500
        aggregation_temporality: "AGGREGATION_TEMPORALITY_CUMULATIVE"
        metrics_flush_interval: 15s
      {{- end }}
      {{- if eq $name "servicegraph" }}
      servicegraph:
        latency_histogram_buckets: {{ $.Values.histograms.buckets | toJson }}
        dimensions: [cluster, namespace, service.name, service.version]
        store:
          ttl: 2s
          max_items: 1000
        cache_loop: 2m
        store_expiration_loop: 10s
        virtual_node_peer_attributes:
          - db.name
          - rpc.service
      {{- end }}
    
    processors:
      {{- if has "memory_limiter" $collector.config.processors }}
      memory_limiter:
        check_interval: 1s
        limit_percentage: 75
        spike_limit_percentage: 25
      {{- end }}
      {{- if has "resource" $collector.config.processors }}
      resource:
        attributes:
        - key: cluster
          value: {{ $.Values.global.clusterName }}
          action: insert
        - key: workloadName
          value: {{ $mergedCollector.config.workloadName | quote }}
          action: insert
      {{- end }}
      {{- if has "batch" $mergedCollector.config.processors }}
      batch:
        send_batch_size: 1000
        timeout: 10s
      {{- end }}
      {{- if or (eq $name "tailsampling") (eq $name "spanmetrics") (eq $name "servicegraph") }}
      resource/add_collector_info:
        attributes:
        - key: cluster
          value: {{ $.Values.global.clusterName }}
          action: insert
        - key: collector.name
          value: "collector-{{ $name }}"
          action: insert
        - key: workloadName
          value: {{ $mergedCollector.config.workloadName | quote }}
          action: insert
      {{- end }}
      {{- if eq $name "tailsampling" }}
      tail_sampling:
        decision_wait: {{ $mergedCollector.config.decisionWait }}
        num_traces: 50000
        expected_new_traces_per_sec: 10
        policies:
          - name: probabilistic-policy
            type: probabilistic
            probabilistic:
              sampling_percentage: {{ mul $mergedCollector.config.samplingRate 100 }}
      {{- end }}
      {{- if eq $name "receiver" }}
      resourcedetection:
        detectors: [env, system]
        timeout: 5s
        override: false
      
      transform/set_standard_labels:
        log_statements:
          - set(resource.attributes["loki.resource.labels"], Concat(["deployment.environment", "service.name", "service.namespace", "service.instance.id", "otel_collector_environment", "cloud.platform", "cloud.datacenter"], ","))
          - set(resource.attributes["otel_collector_environment"], "${env:COLLECTOR_ENVIRONMENT}")
        trace_statements:
          - set(resource.attributes["otel_collector_environment"], "${env:COLLECTOR_ENVIRONMENT}")
          - set(resource.attributes["service.instance.id"], resource.attributes["k8s.pod.name"]) where resource.attributes["k8s.pod.name"] != nil
          - set(resource.attributes["service.instance.id"], "MISSING_POD_NAME") where resource.attributes["k8s.pod.name"] == nil
          - set(resource.attributes["k8s.cluster.name"], "${env:CLUSTER_NAME}")
      
      transform/drop_unneeded_resource_attributes:
        error_mode: ignore
        trace_statements:
          - context: resource
            statements:
              - delete_key(attributes, "k8s.pod.start_time")
              - delete_key(attributes, "os.description")
              - delete_key(attributes, "os.type")
              - delete_key(attributes, "process.command_args")
              - delete_key(attributes, "process.executable.path")
              - delete_key(attributes, "process.pid")
              - delete_key(attributes, "process.runtime.description")
              - delete_key(attributes, "process.runtime.name")
              - delete_key(attributes, "process.runtime.version")
              - delete_key(attributes, "container.image.id")
        metric_statements:
          - context: resource
            statements:
              - delete_key(attributes, "k8s.pod.start_time")
              - delete_key(attributes, "os.description")
              - delete_key(attributes, "os.type")
              - delete_key(attributes, "process.command_args")
              - delete_key(attributes, "process.executable.path")
              - delete_key(attributes, "process.pid")
              - delete_key(attributes, "process.runtime.description")
              - delete_key(attributes, "process.runtime.name")
              - delete_key(attributes, "process.runtime.version")
              - delete_key(attributes, "container.image.id")
        log_statements:
          - context: resource
            statements:
              - delete_key(attributes, "k8s.pod.start_time")
              - delete_key(attributes, "os.description")
              - delete_key(attributes, "os.type")
              - delete_key(attributes, "process.command_args")
              - delete_key(attributes, "process.executable.path")
              - delete_key(attributes, "process.pid")
              - delete_key(attributes, "process.runtime.description")
              - delete_key(attributes, "process.runtime.name")
              - delete_key(attributes, "process.runtime.version")
              - delete_key(attributes, "container.image.id")

      # K8s attributes extraction
      k8sattributes:
        auth_type: serviceAccount
        passthrough: false
        filter:
          node_from_env_var: KUBE_NODE_NAME
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
          labels:
            - tag_name: app.kubernetes.io/name
              key: app.kubernetes.io/name
              from: pod
            - tag_name: app.kubernetes.io/version
              key: app.kubernetes.io/version
              from: pod
            - tag_name: app.kubernetes.io/component
              key: app.kubernetes.io/component  
              from: pod
      {{- end }}
      {{- if eq $name "node-metrics" }}
      filter/kubeletstats_allowlist:
        metrics:
          include:
            match_type: regexp
            metric_names:
            - "{{ include "otel-collectors.kubeletstatsRegex" $ }}"
      {{- end }}
    
    exporters:
      {{- if eq $name "receiver" }}
      loadbalancing/tailsampling:
        routing_key: "traceID"
        protocol:
          otlp:
            tls:
              insecure: true
        resolver:
          k8s:
            service: {{ $.Release.Name }}-tailsampling-collector-headless
            ports:
              - 4317
      loadbalancing/spanmetrics:
        routing_key: "service"
        protocol:
          otlp:
            tls:
              insecure: true
        resolver:
          k8s:
            service: {{ $.Release.Name }}-spanmetrics-collector-headless
            ports:
              - 4317
      loadbalancing/servicegraph:
        routing_key: "traceID"
        protocol:
          otlp:
            tls:
              insecure: true
        resolver:
          k8s:
            service: {{ $.Release.Name }}-servicegraph-collector-headless
            ports:
              - 4317
      {{- else }}
      otlphttp/grafanacloud:
        endpoint: {{ $.Values.grafanaCloud.endpoint }}
        auth:
          authenticator: basicauth/grafanacloud
      {{- end }}
    
    extensions:
      basicauth/grafanacloud:
        client_auth:
          username: ${env:GRAFANA_USERNAME}
          password: ${env:GRAFANA_PASSWORD}
      health_check:
        endpoint: 0.0.0.0:13133
    
    service:
      extensions: [basicauth/grafanacloud, health_check]
      pipelines:
        {{- if eq $name "receiver" }}
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resourcedetection, k8sattributes, transform/set_standard_labels, transform/drop_unneeded_resource_attributes, batch]
          exporters: [loadbalancing/tailsampling, loadbalancing/spanmetrics, loadbalancing/servicegraph]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resourcedetection, k8sattributes, transform/set_standard_labels, transform/drop_unneeded_resource_attributes, batch]
          exporters: [loadbalancing/tailsampling]
        {{- else if eq $name "tailsampling" }}
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, tail_sampling, batch]
          exporters: [otlphttp/grafanacloud]
        logs:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, batch]
          exporters: [otlphttp/grafanacloud]
        {{- else if eq $name "spanmetrics" }}
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, batch]
          exporters: [spanmetrics]
        metrics/spanmetrics:
          receivers: [spanmetrics]
          processors: [memory_limiter, resource/add_collector_info, batch]
          exporters: [otlphttp/grafanacloud]
        {{- else if eq $name "servicegraph" }}
        traces:
          receivers: [otlp]
          processors: [memory_limiter, resource/add_collector_info, batch]
          exporters: [servicegraph]
        metrics/servicegraph:
          receivers: [servicegraph]
          processors: [batch]
          exporters: [otlphttp/grafanacloud]
        {{- else }}
        metrics:
          receivers: {{ $mergedCollector.config.receivers | toJson }}
          processors: {{ $mergedCollector.config.processors | toJson }}
          exporters: {{ $mergedCollector.config.exporters | toJson }}
        {{- end }}
      telemetry:
        logs:
          level: INFO

  env:
  - name: CLUSTER_NAME
    value: {{ $.Values.global.clusterName }}
  - name: COLLECTOR_ENVIRONMENT
    value: {{ $.Values.global.environment }}
  {{- if and $mergedCollector.targetAllocator $mergedCollector.targetAllocator.enabled (has "prometheus" $mergedCollector.config.receivers) }}
  - name: POD_NAME
    valueFrom:
      fieldRef:
        fieldPath: metadata.name
  {{- end }}
  {{- if or (eq $name "receiver") (eq $name "node-metrics") }}
  - name: KUBE_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  {{- end }}
  {{- if eq $name "node-metrics" }}
  - name: K8S_NODE_NAME
    valueFrom:
      fieldRef:
        fieldPath: spec.nodeName
  {{- end }}
  - name: GRAFANA_USERNAME
    valueFrom:
      secretKeyRef:
        key: username
        name: {{ $.Values.grafanaCloud.authSecretName }}
  - name: GRAFANA_PASSWORD
    valueFrom:
      secretKeyRef:
        key: password
        name: {{ $.Values.grafanaCloud.authSecretName }}

  {{- if or $mergedCollector.volumeMounts (eq $name "receiver") (eq $name "node-metrics") }}
  volumeMounts:
  {{- if $mergedCollector.volumeMounts }}
    {{- toYaml $mergedCollector.volumeMounts | nindent 2 }}
  {{- end }}
  {{- if eq $name "node-metrics" }}
  - name: proc
    mountPath: /host/proc
    readOnly: true
  - name: sys
    mountPath: /host/sys
    readOnly: true
  {{- end }}
  {{- end }}
    
  {{- if or $mergedCollector.volumes (eq $name "receiver") (eq $name "node-metrics") }}
  volumes:
  {{- if $mergedCollector.volumes }}
    {{- toYaml $mergedCollector.volumes | nindent 2 }}
  {{- end }}
  {{- if eq $name "node-metrics" }}
  - name: proc
    hostPath:
      path: /proc
  - name: sys
    hostPath:
      path: /sys
  {{- end }}
  {{- end }}

  mode: {{ $mergedCollector.mode }}
  serviceAccount: {{ $mergedCollector.serviceAccount }}
{{- end }}
{{- end }}